# Gestión de Productos S.A.

Este es un proyecto desarrollado en Django para la gestión de productos de la empresa "Gestión de Productos S.A." Incluye modelos, vistas, formularios y plantillas que permiten gestionar productos, categorías, marcas y características. Además, se ha estilizado con CSS para una mejor presentación visual.

## Requisitos

Asegúrate de tener instalados los siguientes requisitos antes de ejecutar la aplicación:

- Python 3.12 o superior
- Django 5.1 o superior
- SQLite3 (opcional, ya que Django lo utiliza por defecto)

## Instalación

### Clonar el repositorio

Clona este repositorio:

git clone <https://github.com/MauricioR96/ti2041-2024.git>


## Ejecución 
Ejecuta los siguientes comandos en la terminal de tu editor:

- python manage.py runserver

**************url's*****************
http://127.0.0.1:8000/logout/ (cerrar sesion)
http://127.0.0.1:8000/admin/ (ir al panel de adm.SQLlite)
http://127.0.0.1:8000/registro/ (registro de productos)

**************************************************************
## Administrador de Django

- Nombre de usuario: admin
- Contraseña: inacap2024

## Usuario Full Privilegios (Nuevo)

- Nombre de usuario: USUARIOJWT
- Contraseña: Mauricio1.

## Usuario de Django sin privilegios 

- Nombre de usuario: lucho
- Contraseña: Qweasd1.
**************************************************************

PARA CREAR UN TOKEN API

IR A POSTMAN CON LA SGTE URL: http://127.0.0.1:8000/api/token/
BODY:{
    "username": "mauricio1",
    "password": "mauricio2024"
}

RESPUESTA ESPERADA:

{
    "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTczNDMyMzQyNCwiaWF0IjoxNzM0MjM3MDI0LCJqdGkiOiI2NzcyZWE0NGM5ZWU0M2RlODkyMzZiNjk5OTJhYzQ5NiIsInVzZXJfaWQiOjN9.IMOAEO-ZnnZI5BU4uKLmTsjiiCnKH8rBBzh4fYscLKg",
    "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM0MjM3NjI0LCJpYXQiOjE3MzQyMzcwMjQsImp0aSI6ImE3NDBiMzAzY2M0ZDQyMzliNGI3Y2Q0NjkxYWEyMDUwIiwidXNlcl9pZCI6M30.uktJeag8xK4gdjipw6fyh36A7aOgeTdSShNs4nSBKTo"
}


PARA PROBAR LA API:

GET A LA SIGUIENTE URL : http://127.0.0.1:8000/api/productos/
Auth Type: Bearer Token

token ->     "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM0MjM3NjI0LCJpYXQiOjE3MzQyMzcwMjQsImp0aSI6ImE3NDBiMzAzY2M0ZDQyMzliNGI3Y2Q0NjkxYWEyMDUwIiwidXNlcl9pZCI6M30.uktJeag8xK4gdjipw6fyh36A7aOgeTdSShNs4nSBKTo"
}
**************************************************************

Ejemplos para probar todos los métodos HTTP de la API usando Postman. Incluyo la estructura de las solicitudes y respuestas esperadas.

Método: POST
URL: http://127.0.0.1:8000/api/token/
 
Body (JSON):
 
{
    "username": "USUARIOJWT",
    "password": "Mauricio1"
}
 
Respuesta Exitosa:
 
{
    "refresh": "<refresh_token>",
    "access": "<access_token>"
}
 
2. Listar Productos
 
Método: GET
URL: http://127.0.0.1:8000/api/productos/
 
Headers:
 
    Authorization: Bearer <access_token>
 
Respuesta Exitosa (Ejemplo):
 
[
    {
        "id": 1,
        "codigo": "B-1331",
        "nombre": "Producto Ejemplo",
        "precio": "1000000.00",
        "marca": 1,
        "categoria": 2,
        "caracteristicas": [4, 5]
    },
    {
        "id": 2,
        "codigo": "A-0002",
        "nombre": "Otro Producto",
        "precio": "50000.00",
        "marca": 2,
        "categoria": 1,
        "caracteristicas": []
    }
]
 
3. Crear un Producto
 
Método: POST
URL: http://127.0.0.1:8000/api/productos/
 
Headers:
 
    Authorization: Bearer <access_token>
    Content-Type: application/json
 
Body (JSON):
 
{
    "codigo": "B-2000",
    "nombre": "Nuevo Producto",
    "precio": "120000.50",
    "marca": 1,
    "categoria": 1,
    "caracteristicas": [4, 5]
}
 
Respuesta Exitosa (Ejemplo):
 
{
    "id": 3,
    "codigo": "B-2000",
    "nombre": "Nuevo Producto",
    "precio": "120000.50",
    "marca": 1,
    "categoria": 1,
    "caracteristicas": [4, 5]
}
 
4. Obtener Detalle de un Producto
 
Método: GET
URL: http://127.0.0.1:8000/api/productos/<id>/
Reemplaza <id> por el ID del producto (por ejemplo, 1).
 
Headers:
 
    Authorization: Bearer <access_token>
 
Respuesta Exitosa (Ejemplo):
 
{
    "id": 1,
    "codigo": "B-1331",
    "nombre": "Producto Ejemplo",
    "precio": "1000000.00",
    "marca": 1,
    "categoria": 2,
    "caracteristicas": [4, 5]
}
 
5. Actualizar un Producto
 
Método: PUT
URL: http://127.0.0.1:8000/api/productos/<id>/
Reemplaza <id> con el ID del producto.
 
Headers:
 
    Authorization: Bearer <access_token>
    Content-Type: application/json
 
Body (JSON):
 
{
    "codigo": "B-1331",
    "nombre": "Producto Actualizado",
    "precio": "1100000.00",
    "marca": 1,
    "categoria": 1,
    "caracteristicas": [4]
}
 
Respuesta Exitosa:
 
{
    "id": 1,
    "codigo": "B-1331",
    "nombre": "Producto Actualizado",
    "precio": "1100000.00",
    "marca": 1,
    "categoria": 1,
    "caracteristicas": [4]
}
 
6. Actualizar parcialmente un Producto
 
Método: PATCH
URL: http://127.0.0.1:8000/api/productos/<id>/
Reemplaza <id> con el ID del producto.
 
Headers:
 
    Authorization: Bearer <access_token>
    Content-Type: application/json
 
Body (JSON):
 
{
    "precio": "900000.00"
}
 
Respuesta Exitosa:
 
{
    "id": 1,
    "codigo": "B-1331",
    "nombre": "Producto Actualizado",
    "precio": "900000.00",
    "marca": 1,
    "categoria": 1,
    "caracteristicas": [4]
}
 
7. Eliminar un Producto
 
Método: DELETE
URL: http://127.0.0.1:8000/api/productos/<id>/
Reemplaza <id> con el ID del producto.
 
Headers:
 
    Authorization: Bearer <access_token>
 
Respuesta Exitosa:
 
    Status: 204 No Content
    Body: Vacío.


***********************************************************

Se ha implementado una API REST básica utilizando NinjaAPI. La documentación Swagger está disponible en:

- http://127.0.0.1:8000/swagger/

************************************************************
## Información Importante

No olvides que a la hora de ejecutar la aplicación debes encontrarte en la carpeta de gestion_productos. Para eso, escribe en tu terminal:



